
// backend/server.js const express = require('express'); const mongoose = require('mongoose'); const cors = require('cors'); const dotenv = require('dotenv'); const multer = require('multer'); const path = require('path');

const authRoutes = require('./routes/authRoutes'); const employeeRoutes = require('./routes/employeeRoutes');

dotenv.config(); const app = express();

app.use(cors()); app.use(express.json()); app.use('/uploads', express.static('uploads'));

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true, }).then(() => console.log('MongoDB connected')) .catch(err => console.error(err));

app.use('/api/auth', authRoutes); app.use('/api/employees', employeeRoutes);

const PORT = process.env.PORT || 5000; app.listen(PORT, () => console.log(Server running on port ${PORT}));

// backend/models/Login.js const mongoose = require('mongoose'); const LoginSchema = new mongoose.Schema({ f_userName: String, f_Pwd: String }); module.exports = mongoose.model('Login', LoginSchema);

// backend/models/Employee.js const mongoose = require('mongoose'); const EmployeeSchema = new mongoose.Schema({ f_Image: String, f_Name: String, f_Email: { type: String, unique: true }, f_Mobile: String, f_Designation: String, f_gender: String, f_Course: [String], f_Createdate: { type: Date, default: Date.now } }); module.exports = mongoose.model('Employee', EmployeeSchema);

// backend/routes/authRoutes.js const express = require('express'); const router = express.Router(); const Login = require('../models/Login');

router.post('/login', async (req, res) => { const { f_userName, f_Pwd } = req.body; try { const user = await Login.findOne({ f_userName, f_Pwd }); if (user) { res.json({ success: true, message: 'Login successful' }); } else { res.json({ success: false, message: 'Invalid credentials' }); } } catch (error) { res.status(500).json({ success: false, message: 'Server error' }); } });

module.exports = router;

// backend/routes/employeeRoutes.js const express = require('express'); const router = express.Router(); const multer = require('multer'); const Employee = require('../models/Employee');

const storage = multer.diskStorage({ destination: (req, file, cb) => cb(null, 'uploads/'), filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname) }); const upload = multer({ storage, fileFilter: (req, file, cb) => { const validTypes = ['image/jpeg', 'image/png']; cb(null, validTypes.includes(file.mimetype

